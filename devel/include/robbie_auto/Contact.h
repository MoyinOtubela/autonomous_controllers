// Generated by gencpp from file robbie_auto/Contact.msg
// DO NOT EDIT!


#ifndef ROBBIE_AUTO_MESSAGE_CONTACT_H
#define ROBBIE_AUTO_MESSAGE_CONTACT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robbie_auto
{
template <class ContainerAllocator>
struct Contact_
{
  typedef Contact_<ContainerAllocator> Type;

  Contact_()
    : shank(false)
    , lhm(false)
    , stabilizer(false)  {
    }
  Contact_(const ContainerAllocator& _alloc)
    : shank(false)
    , lhm(false)
    , stabilizer(false)  {
  (void)_alloc;
    }



   typedef uint8_t _shank_type;
  _shank_type shank;

   typedef uint8_t _lhm_type;
  _lhm_type lhm;

   typedef uint8_t _stabilizer_type;
  _stabilizer_type stabilizer;




  typedef boost::shared_ptr< ::robbie_auto::Contact_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robbie_auto::Contact_<ContainerAllocator> const> ConstPtr;

}; // struct Contact_

typedef ::robbie_auto::Contact_<std::allocator<void> > Contact;

typedef boost::shared_ptr< ::robbie_auto::Contact > ContactPtr;
typedef boost::shared_ptr< ::robbie_auto::Contact const> ContactConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robbie_auto::Contact_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robbie_auto::Contact_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robbie_auto

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'robbie_auto': ['/home/moyin/dev/autonomous_controllers/src/robot_controllers/robbie_auto/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robbie_auto::Contact_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robbie_auto::Contact_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robbie_auto::Contact_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robbie_auto::Contact_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robbie_auto::Contact_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robbie_auto::Contact_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robbie_auto::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1098ecc6338cffcc410aeee87ea5720";
  }

  static const char* value(const ::robbie_auto::Contact_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1098ecc6338cffcULL;
  static const uint64_t static_value2 = 0xc410aeee87ea5720ULL;
};

template<class ContainerAllocator>
struct DataType< ::robbie_auto::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robbie_auto/Contact";
  }

  static const char* value(const ::robbie_auto::Contact_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robbie_auto::Contact_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool shank\n\
bool lhm\n\
bool stabilizer\n\
";
  }

  static const char* value(const ::robbie_auto::Contact_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robbie_auto::Contact_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shank);
      stream.next(m.lhm);
      stream.next(m.stabilizer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Contact_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robbie_auto::Contact_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robbie_auto::Contact_<ContainerAllocator>& v)
  {
    s << indent << "shank: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shank);
    s << indent << "lhm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lhm);
    s << indent << "stabilizer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stabilizer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBBIE_AUTO_MESSAGE_CONTACT_H
